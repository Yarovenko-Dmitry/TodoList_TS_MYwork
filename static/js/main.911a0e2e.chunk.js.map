{"version":3,"sources":["Todolist.tsx","App.tsx","serviceWorker.ts","index.tsx"],"names":["Todolist","props","title","tasks","map","t","key","id","type","checked","isDone","onClick","removeTask","changeFilter","App","useState","setTask","tasksForTodoList","filter","setFilter","className","filteredTasks","value","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"oRAiBO,SAASA,EAASC,GACvB,OAAO,6BACL,4BAAKA,EAAMC,OACX,6BACE,gCACA,sCAEF,4BAEID,EAAME,MACHC,KAAI,SAAAC,GAAC,OACJ,wBAAIC,IAAKD,EAAEE,IAAI,2BACPC,KAAK,WAAWC,QAASJ,EAAEK,SACjC,8BAAOL,EAAEH,OACT,4BAAQS,QAAS,WACfV,EAAMW,WAAWP,EAAEE,MADrB,aAOV,6BACE,4BAAQI,QAAS,WACfV,EAAMY,aAAa,SADrB,OAIA,4BAAQF,QAAS,WACfV,EAAMY,aAAa,WADrB,UAIA,4BAAQF,QAAS,WACfV,EAAMY,aAAa,eADrB,eCUSC,MAnDf,WAAgB,IAAD,EAEUC,mBACrB,CACE,CAACR,GAAI,EAAGL,MAAO,WAAYQ,QAAQ,GACnC,CAACH,GAAI,EAAGL,MAAO,KAAMQ,QAAQ,GAC7B,CAACH,GAAI,EAAGL,MAAO,UAAWQ,QAAQ,GAClC,CAACH,GAAI,EAAGL,MAAO,YAAaQ,QAAQ,GACpC,CAACH,GAAI,EAAGL,MAAO,UAAWQ,QAAQ,KARzB,mBAERP,EAFQ,KAEDa,EAFC,KAYTC,EAAmBd,EAZV,EAcaY,mBAA2B,OAdxC,mBAcRG,EAdQ,KAcAC,EAdA,KAwCb,MAxBe,UAAXD,IACFD,EAAmBd,EAAMe,QAAO,SAAAb,GAAC,OAAiB,IAAbA,EAAEK,WAI1B,cAAXQ,IACFD,EAAmBd,EAAMe,QAAO,SAAAb,GAAC,OAAiB,IAAbA,EAAEK,WAmBvC,yBAAKU,UAAU,OACb,kBAACpB,EAAD,CAAUE,MAAM,gBACNC,MAAOc,EACPL,WAVG,SAACL,GAChB,IAAIc,EAAgBlB,EAAMe,QAAO,SAAAb,GAAC,OAAIA,EAAEE,IAAMA,KAC9CS,EAAQK,IASIR,aAnBK,SAACS,GAClBH,EAAUG,QCrBMC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAO,kBAAC,EAAD,MAAUC,SAASC,eAAe,SDqI5C,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,c","file":"static/js/main.911a0e2e.chunk.js","sourcesContent":["import React from 'react';\r\nimport {FilterValuesType} from \"./App\";\r\n\r\ntype TaskType = {\r\n  id: number\r\n  title: string\r\n  isDone: boolean\r\n}\r\n\r\ntype PropsType = {\r\n  title: string\r\n  tasks: Array<TaskType>\r\n  removeTask: (id: number) => void\r\n  changeFilter: (value: FilterValuesType) => void\r\n}\r\n\r\n\r\nexport function Todolist(props: PropsType) {\r\n  return <div>\r\n    <h3>{props.title}</h3>\r\n    <div>\r\n      <input/>\r\n      <button>+</button>\r\n    </div>\r\n    <ul>\r\n      {\r\n        props.tasks\r\n          .map(t =>\r\n            <li key={t.id}><\r\n              input type=\"checkbox\" checked={t.isDone}/>\r\n              <span>{t.title}</span>\r\n              <button onClick={() => {\r\n                props.removeTask(t.id)\r\n              }}> del\r\n              </button>\r\n            </li>)\r\n      }\r\n    </ul>\r\n    <div>\r\n      <button onClick={() => {\r\n        props.changeFilter('all')\r\n      }}>All\r\n      </button>\r\n      <button onClick={() => {\r\n        props.changeFilter('activ')\r\n      }}>Active\r\n      </button>\r\n      <button onClick={() => {\r\n        props.changeFilter('completed')\r\n      }}>Completed\r\n      </button>\r\n    </div>\r\n  </div>\r\n}\r\n","import React, {useState} from 'react';\r\nimport './App.css';\r\nimport {Todolist} from './Todolist';\r\n\r\nexport type FilterValuesType = 'all' | 'activ' | 'completed' ;\r\n\r\nfunction App() {\r\n\r\n  let [tasks, setTask] = useState(\r\n    [\r\n      {id: 1, title: \"HTML&CSS\", isDone: true},\r\n      {id: 2, title: \"JS\", isDone: true},\r\n      {id: 3, title: \"ReactJS\", isDone: false},\r\n      {id: 4, title: \"Reast API\", isDone: false},\r\n      {id: 5, title: \"GraphQL\", isDone: false}\r\n    ]\r\n  );\r\n\r\n  let tasksForTodoList = tasks;\r\n\r\n  let [filter, setFilter] = useState<FilterValuesType>('all');\r\n\r\n  if (filter === 'activ') {\r\n    tasksForTodoList = tasks.filter(t => t.isDone === false);\r\n  }\r\n  ;\r\n\r\n  if (filter === 'completed') {\r\n    tasksForTodoList = tasks.filter(t => t.isDone === true);\r\n  }\r\n  ;\r\n\r\n  let changeFilter = (value: FilterValuesType) => {\r\n    setFilter(value)\r\n  };\r\n\r\n  // function changeFilter (value: 'all' | 'activ' | 'completed') {\r\n  //   setFilter(value)\r\n  // };\r\n\r\n  let removeTask = (id: number) => {\r\n    let filteredTasks = tasks.filter(t => t.id != id);\r\n    setTask(filteredTasks);\r\n  };\r\n\r\n\r\n  return (\r\n    <div className=\"App\">\r\n      <Todolist title=\"What to learn\"\r\n                tasks={tasksForTodoList}\r\n                removeTask={removeTask}\r\n                changeFilter={changeFilter}\r\n      />\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default App;\r\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      process.env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\nimport * as serviceWorker from './serviceWorker';\r\n\r\nReactDOM.render(<App />,  document.getElementById('root'));\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}